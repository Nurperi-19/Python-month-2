# 1) Решите задачу 1 из проекта Эйлера:
# Если мы перечислим все натуральные числа ниже 10, кратные 3 или 5, мы получим 3, 5, 6 и 9.
# Сумма этих кратных равна 23. Найдите сумму всех чисел, кратных 3 или 5, меньших 1000. ✔
lst = []
for i in range(1, 1000):
    if i%3==0 or i%5==0:
        lst.append(i)
print(f'1-задание: {sum(lst)}')

# 2) Найдите все простые числа (простые числа - числа которые делятся на себя и на единицу)
# от 1 до 10000 сначала перебором, а затем используя алгоритм решето Аткина (гуглите) или
# какое-либо другое решето (много вариаций, почти любой подойдёт)
test1 = set()
# for a in range(1, 100):
#     for b in range(2, a):
#         if a%b==0:
#             break
#         else:
#             test1.add(a)

print(f'2-задание: {test1}')
# 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97

# 3) Из проекта Эйлера решите №16 (2**15 = 32768, а сумма его цифр равна 3 + 2 + 7 + 6 + 8 = 26.
# Чему равна сумма цифр числа 2**1000?, следующим образом:
# 3_1) Создайте класс MyNumber, в конструкторе которого принимается степень числа (power)
# и высчитывается значение числа (value) и это значение должно записываться в свойство через self ✔
class MyNumber:
    def __init__(self, power):
        self.power = power
        self.value = 2**self.power
        self.digits_sum = 0
        print(self.value)

# 3_2) Добавьте метод count_digits_sum, которое должно посчитать сумму цифр числа self.value, то есть self.digits_sum ✔
    def count_digits_sum(self):
        for i in str(self.value):
            self.digits_sum += int(i)
        return self.digits_sum

# 3_3) Создайте 2 объекта этого класса, передав значения 15 и 1000 ✔
print('3-задание:')
num_1 = MyNumber(15)             # 15 - это степень
print(num_1.value)               # 32768
print(num_1.count_digits_sum())  # 26

num_2 = MyNumber(1000)           # 1000 - степень
print(num_2.count_digits_sum())  # 1366 - сумма цифр
